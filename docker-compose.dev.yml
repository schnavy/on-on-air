services:
  db:
    image: postgres:13
    container_name: on-on-air_db_dev
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data/
      - ./dump:/dump
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PW}
      POSTGRES_DB: on-on-air_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - internal_network

  app:
    build:
      context: .
      target: dev
    container_name: on-on-air_app_dev
    restart: always
    volumes:
      - .:/app
      - /app/node_modules # Prevents conflicts with local node_modules
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${DB_USER}:${DB_PW}@db:5432/on-on-air_db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal_network

  prisma:
    image: node:18-alpine
    container_name: on-on-air_prisma_dev
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules # Prevents conflicts with local node_modules
    command: ["npx", "prisma", "studio"]
    ports:
      - "5555:5555"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${DB_USER}:${DB_PW}@db:5432/on-on-air_db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal_network

networks:
  internal_network:
    driver: bridge

volumes:
  db_data:
